
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000

HISTORY_IGNORE="(ls|cd|pwd|exit|cd|history|mount|man)*"



# Execute neofetch
fastfetch

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH=~/.oh-my-zsh
DISABLE_AUTO_UPDATE="true"

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="powerlevel10k/powerlevel10k"


# Set default user for prompt
DEFAULT_USER=`whoami`

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  1password
  aws
  branch
  brew
  dash
  docker
  dotenv
  extract
  forklift
  fzf
  gcloud
  gem
  gh
#  git
  git-extras
  git-flow
  gitignore
  golang
  history
  jsontools
  kubectl
  kubectx
  macos
  marked2
  pip
  pipenv
  pre-commit
  python
  shrink-path
  ssh-agent
  sublime
  sudo
  terraform
  tmux
  urltools
  vagrant
  zsh-autosuggestions
  z
  )

# User configuration

export PATH=$PATH:~/bin

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export EDITOR=vim

################################################################################
# History Options
# https://martinheinz.dev/blog/110
################################################################################

setopt EXTENDED_HISTORY         # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY       # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY            # Share history between all sessions.
setopt HIST_IGNORE_DUPS         # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS     # Delete an old recorded event if a new event is a duplicate.
setopt HIST_IGNORE_SPACE        # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS        # Do not write a duplicate event to the history file.
setopt HIST_VERIFY              # Do not execute immediately upon history expansion.
setopt APPEND_HISTORY           # append to history file (Default)
setopt HIST_NO_STORE            # Don't store history commands
setopt HIST_REDUCE_BLANKS       # Remove superfluous blanks from each command line being added to the history.
# setopt HIST_STAMPS="yyyy-mm-dd" (Non Supported)
################################################################################

# ostype returns the lowercase OS name
ostype() {
    echo ${(L):-$(uname)}
}

# os_detect export the PLATFORM variable as you see fit
os_detect() {
    export PLATFORM
    case "$(ostype)" in
        *'linux'*)  PLATFORM='linux'   ;;
        *'darwin'*) PLATFORM='osx'     ;;
        *'bsd'*)    PLATFORM='bsd'     ;;
        *)          PLATFORM='unknown' ;;
    esac
}

# is_osx returns true if running OS is Macintosh
is_osx() {
    os_detect
    if [[ $PLATFORM == "osx" ]]; then
        return 0
    else
        return 1
    fi
}
alias is_mac=is_osx

# is_linux returns true if running OS is GNU/Linux
is_linux() {
    os_detect
    if [[ $PLATFORM == "linux" ]]; then
        return 0
    else
        return 1
    fi
}

# is_bsd returns true if running OS is FreeBSD
is_bsd() {
    os_detect
    if [[ $PLATFORM == "bsd" ]]; then
        return 0
    else
        return 1
    fi
}

# get_os returns OS name of the PLATFORM that is running
get_os() {
    local os
    for os in osx linux bsd; do
        if is_$os; then
            echo $os
        fi
    done
}


function swap()
{ # Swap 2 filenames around, if they exist (from Uzi's bashrc).
    local TMPFILE=tmp.$$

    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1

    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

function extract()      # Handy Extract Program
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Create a ZIP archive of a file or folder.
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

# Make your directories and files access rights sane.
function sanitize() { chmod -R u=rwX,g=rX,o= "$@" ;}

SSHAGENT=/usr/bin/ssh-agent
SSHAGENTARGS="-s"
if [ -z "$SSH_AUTH_SOCK" -a -x "$SSHAGENT" ]; then
    eval `$SSHAGENT $SSHAGENTARGS`
    trap "kill $SSH_AGENT_PID" 0
fi

# if [ -z "$TMUX" ]; then
#     # we're not in a tmux session

#     if [ ! -z "$SSH_TTY" ]; then
#         # We logged in via SSH

#         # if ssh auth variable is missing
#         if [ -z "$SSH_AUTH_SOCK" ]; then
#             export SSH_AUTH_SOCK="$HOME/.ssh/.auth_socket"
#         fi

#         # if socket is available create the new auth session
#         if [ ! -S "$SSH_AUTH_SOCK" ]; then
#             `ssh-agent -a $SSH_AUTH_SOCK` &gt; /dev/null 2>&1
#             echo $SSH_AGENT_PID &gt; $HOME/.ssh/.auth_pid
#         fi

#         # if agent isn't defined, recreate it from pid file
#         if [ -z $SSH_AGENT_PID ]; then
#             export SSH_AGENT_PID=`cat $HOME/.ssh/.auth_pid`
#         fi

#         # Add all default keys to ssh auth
#         ssh-add 2>/dev/null

#     fi
# fi


ZSH_TMUX_AUTOSTART=true
ZSH_TMUX_AUTOCONNECT=true

# Source alias file
source ~/.zsh_aliases

if [[ $PLATFORM == 'osx' ]]; then

  # Requires coreutils from brew
  PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
  MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
  test -e ~/.dir_colors && eval `dircolors -b ~/.dir_colors`

fi

###############################################################################
# http://brettterpstra.com/2019/01/15/stuff-ive-made-and-actually-use/
###############################################################################

###############################################################################

# iTerm2 Shell Integration
if [[ $TERM_PROGRAM != "WarpTerminal" ]]; then
    ##### WHAT YOU WANT TO DISABLE FOR WARP - BELOW
    #
    test -e ${HOME}/.iterm2_shell_integration.bash && source ${HOME}/.iterm2_shell_integration.bash
    #
    ###### WHAT YOU WANT TO DISABLE FOR WARP - ABOVE
fi

if [[ $TERM_PROGRAM != "WarpTerminal" ]]; then
    ##### WHAT YOU WANT TO DISABLE FOR WARP - BELOW
    #
    #    # POWERLEVEL10K or Other Unsupported Custom Prompt Code
    #
    #    ##### WHAT YOU WANT TO DISABLE FOR WARP - ABOVE
fi

# Adds syntax highlighting to less
# export LESSOPEN='|~/.lessfilter %s'

alias more='less'
export LESS='-R'
# https://github.com/wofr06/lesspipe
export LESSOPEN="|/usr/local/bin/lesspipe.sh %s"

# LESS man page colors (makes Man pages more readable).
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'



autoload -U +X bashcompinit && bashcompinit

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# tmux-window-name() {
#   if [[ -z "$TMUX" ]] || [[ -z "$TMUX_PLUGIN_MANAGER_PATH" ]]; then
#     return
#   fi
#   ($TMUX_PLUGIN_MANAGER_PATH/tmux-window-name/scripts/rename_session_windows.py >/dev/null 2>&1 || true &)
# }


# https://github.com/athityakumar/colorls
# source $(dirname $(gem which colorls))/tab_complete.sh

# fzf
source ~/bin/fzf.sh

# GO setup
export GOPATH=$HOME/go
export GOBIN=$GOPATH/bin
export GOROOT="$(brew --prefix golang)/libexec"

# direnv
eval "$(direnv hook zsh)"
export DIRENV_LOG_FORMAT=$'\033[2mdirenv: %s\033[0m'

# bat
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# Johnny Decimal

cdj() {
  # Update with your document root folder
  pushd ~/Documents/*/*/${1}*
}

# Enable grc for commands that support it
[[ -s "/opt/homebrew/etc/grc.zsh" ]] && source /opt/homebrew/etc/grc.zsh


# ################################################################################
# # Ruby
# ################################################################################
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@3)"
eval "$(rbenv init -)"

export cdj

# Set theme
source ~/.zsh/catppuccin_mocha-zsh-syntax-highlighting.zsh

source ~/.zshrc_local

