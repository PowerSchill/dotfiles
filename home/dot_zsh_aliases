# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

export LSCOLORS='Gxfxcxdxdxegedabagacad'
if [[ $(get_os) == 'linux' || $(get_os) == 'cygwin' ]]; then
  alias ls='ls --color=auto'
  alias lx='ls -lXB' #  Sort by extension.
  alias ll="ls -lv --group-directories-first"
  alias chgrp='chgrp --preserve-root'
  alias chmod='chmod --preserve-root'
  alias chown='chown --preserve-root'
elif [[ $(get_os) == 'osx' ]]; then
  # Commented out because I use the coreutils
  # alias ls='ls --color=auto'
  alias ll='ls -alF'
  alias preview="open -a '$PREVIEW'"
  alias safari="open -a safari"
  alias firefox="open -a firefox"
  alias chrome="open -a google\ chrome"
  alias f='open -a Finder '

  alias brewup='brew update; brew upgrade; brew cleanup; brew cask upgrade; brew doctor'

  # Get rid of those .DS_Store files
  alias dsclean='find . -type f -name .DS_Store -delete'
fi
#-------------------------------------------------------------
# The 'ls' family (this assumes you use a recent GNU ls).
#-------------------------------------------------------------
# Add colors for filetype and  human-readable sizes by default on 'ls':
alias lk='ls -lSr'      #  Sort by size, biggest last.
alias lt='ls -ltr'      #  Sort by date, most recent last.
alias lc='ls -ltcr'     #  Sort by/show change time,most recent last.
alias lu='ls -ltur'     #  Sort by/show access time,most recent last.
alias lm='ll |more'     #  Pipe through 'more'
alias lr='ll -R'        #  Recursive ls.
alias la='ll -A'        #  Show hidden files.
alias tree='tree -Csuh' #  Nice alternative to 'recursive ls' ...
alias l='ls -CF'

# TMUX aliases
alias takeover='tmux detach -a'
alias tmac='tmux new -A -s'

# User Color with grep. TODO: Test on OSX
alias grep='grep --color=auto'
export GREP_COLOR='1;33'

# Clear DNS cache
if [[ $PLATFORM == 'osx' ]]; then
  alias cleardns='sudo killall -HUP mDNSResponder'
fi

# various aliases
alias ..='cd ..'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'
alias cd..='cd ..'
alias cp='cp -i'
alias cpa='cp'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias wget='wget -c'

# top
alias cpu='top -o cpu'
alias mem='top -o rsize' # memory

# bundler
alias b="bundle"
alias bi="bundle install"
alias bu="bundle update"
function be() {
  if [[ ! $1 =~ / ]]; then
    bundle exec "bin/$1"
  else
    bundle exec $@
  fi
}

# npm global install
alias npmg="npm install -g"

# Edit common config files
alias bp="subl ~/.zshrc"
alias kb="subl ~/Library/KeyBindings/DefaultKeyBinding.dict"
# Reload bash settings
alias src="source ~/.zshrc"

# Remove all traces of git from a folder
alias degit="find . -name '.git' -exec rm -rf {} \;"
# add and remove new/deleted files from git index automatically
alias gitar="git ls-files -d -m -o -z --exclude-standard | xargs -0 git update-index --add --remove"
# Git common
alias get="git clone"
alias gd="git diff"
alias gs="git status -bs"
# jump to top level of git repo
alias gt="cd \$(git rev-parse --show-toplevel)"
# Open the current git repo in Tower
alias gtower="gittower \"$(git rev-parse --show-toplevel)\""

# Get current external IP
alias ip="curl icanhazip.com"
alias ip4="curl -4 icanhazip.com"
alias ip6="curl -6 icanhazip.com"

# copy the working directory path
alias cpwd='pwd|tr -d "\n"|pbcopy'

# Toggle wifi (add on or off after command)
alias wifi="networksetup -setairportpower en0"

# Use ack to locate TOD* and FIXM* lines in current folder tree
alias todos='ack --nobreak --nocolor "(TODO|FIXME):"|sed -E "s/(.*:[[:digit:]]+):.*((TODO|FIXME):.*)/\2 :>> \1/"|grep -E --color=always ":>>.*:\d+"'

# Quick Look a file from Terminal
alias ql="qlmanage -px &>/dev/null"

# Search running processes for a pattern
# alias ps?="ps -ef|grep -v grep|grep -iE"
alias psgrep='psgrep -saien'

# Print argument right aligned
alias right="printf '%*s' $(tput cols)"

# DotDrop alias
alias dotdrop='eval $(grep -v "^#" ~/dotfiles/.env) ~/dotfiles/dotdrop.sh'

alias dokken="KITCHEN_LOCAL_YAML=kitchen.dokken.yml kitchen"

alias db="cd ~/Library/CloudStorage/Dropbox"
alias zs="source ~/.zshrc"
alias gum="git pull upstream master"

# Changed your .gitignore _after_ you have added / committed some files?
# run `gri` to untrack anything in your updated .gitignore
# Put this in your .zshrc file
alias gri="git ls-files --ignored --exclude-standard | xargs -0 git rm -r"

# Open all merge conflicts or currently changed files in Sublime Text
# Switch out `code` for `subl`, `vim`, `atom` or your editor's CLI
alias fix="git diff --name-only | uniq | xargs code"

function t() {
  # Defaults to 3 levels deep, do more with `t 5` or `t 1`
  # pass additional args after
  tree -I '.git|node_modules|bower_components|.DS_Store' --dirsfirst --filelimit 15 -L ${1:-3} -aC $2
}

## Terraform
alias tfinit="tfswitch;terraform init"
alias tfplan='tfswitch;terraform init;grc terraform plan -no-color -out=tfplan.out'
alias tfapply="terraform apply tfplan.out"

## Terragrunt
alias tginit="terragrunt init"
alias tgplan='tginit;grc terragrunt plan -no-color -out=tfplan.out'
alias tgapply="terragrunt apply tfplan.out"

alias tginitall="terragrunt run-all init"
alias tgplanall="
  tginitall;
  terragrunt run-all plan -out=tfplan.out |
  grep -ivw 'Refreshing state...\|Reading...\|Read complete after\|Failed to download module\|msg=Executing hook'"
alias tgapplyall="terragrunt run-all apply tfplan.out"

alias tgpurge='find . -type d -name ".terragrunt-cache" -prune -exec rm -rf {} \;'
alias tfpurge='find . -type d -name ".terraform" -prune -exec rm -rf {} \;'

# Prevent myself from doing something stupid
alias rm="echo Use 'trash', or the full path i.e. '/bin/rm'"
alias shred="shred -u"

# chezmoi
alias cm='chezmoi'

# viddy
alias watch=viddy

# Network functions from Jesse Buffington
whereip() { curl -s "https://api.ipgeolocation.io/ipgeo?apiKey=e48648602503456590f864ef21d721e0&ip=$1" | jq '.'; }
whothat() { curl -s "https://api.securitytrails.com/v1/domain/$1" -H 'apikey: nFo75o6yMZ9byXt0o9Mjuor5MlhHtVVL' | jq '.'; }
whohist() { curl -s "https://api.securitytrails.com/v1/history/$1/whois?apikey=nFo75o6yMZ9byXt0o9Mjuor5MlhHtVVL" | jq '.'; }
sslcheck() { echo | openssl s_client -connect $1:443 2>/dev/null | openssl x509 -noout -issuer -subject -dates; }

# Get TLS certificate details
function show_cert() {
  nslookup $1
  (openssl s_client -showcerts -servername $1 -connect $1:443 <<<"Q" | openssl x509 -text | grep -iA2 "Validity")
}


alias vim='nvim'
